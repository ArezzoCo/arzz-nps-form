// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Note that some adapters may set a maximum length for the String type by default, please ensure your strings are long
// enough when changing adapters.
// See https://www.prisma.io/docs/orm/reference/prisma-schema-reference#string for more information
// datasource db {
//   provider = "sqlite"
//   url      = "file:dev.sqlite"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id            String    @id
  shop          String
  state         String
  isOnline      Boolean   @default(false)
  scope         String?
  expires       DateTime?
  accessToken   String
  userId        BigInt?
  firstName     String?
  lastName      String?
  email         String?
  accountOwner  Boolean   @default(false)
  locale        String?
  collaborator  Boolean?  @default(false)
  emailVerified Boolean?  @default(false)
}

model Form {
  id                         Int        @id @default(autoincrement())
  title                      String     @unique
  formType                   String
  orderMetafieldNamespace    String?
  orderMetafieldKey          String?
  customerMetafieldNamespace String?
  customerMetafieldKey       String?
  questions                  Question[]
  OrderNPS                   OrderNPS[]
  createdAt                  DateTime   @default(now())
  updatedAt                  DateTime   @updatedAt
}

model Question {
  id           Int     @id @default(autoincrement())
  title        String  @unique
  description  String?
  inputType    String
  required     Boolean
  showQuestion Boolean
  answers      String
  formId       Int
  Form         Form    @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model OrderNPS {
  id        Int      @id @default(autoincrement())
  orderId   String // extension
  formId    Int // extension
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade) // server
  questions String //respostas do front end
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DynamicForm {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  steps Step[]
}

model Step {
  id          String            @id @default(cuid())
  formId      String
  form        DynamicForm       @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String
  description String?
  order       Int
  questions   DynamicQuestion[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model DynamicQuestion {
  id         String              @id @default(uuid())
  stepId     String
  step       Step                @relation(fields: [stepId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text       String
  type       String
  order      Int
  required   Boolean
  options    Option[]
  conditions QuestionCondition[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  QuestionCondition QuestionCondition[] @relation("DependentQuestion")
}

model Option {
  id         String          @id @default(uuid())
  questionId String
  question   DynamicQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  text       String
  value      String
}

model QuestionCondition {
  id            String          @id @default(uuid())
  questionId    String
  question      DynamicQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  dependentOnId String
  dependentOn   DynamicQuestion @relation("DependentQuestion", fields: [dependentOnId], references: [id], onDelete: Cascade)
  conditionType String
  value         String
}
